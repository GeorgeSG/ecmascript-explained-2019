.slides
  section
    h2 ECMAScript
      br
      | Releases Explained
    em ES8, ES9 и поглед напред
    p.fragment
      em ... и назад

  section(data-transition="slide-in fade-out")
    h2 #КОЙ
    .fragment.about-me
      img(data-src="assets/georgi.jpg" style="height: 300px")
      ul
        li
          img(data-src="assets/icon-user.png")
          | Георги
        li
          img(data-src="assets/icon-email.png")
          a(href="mailto:georgi@gardev.com") georgi@gardev.com
        li
          img(data-src="assets/icon-web.png")
          a(href="http://gardev.com" target="_blank") http://gardev.com
        li
          img(data-src="assets/icon-twitter.png")
          a(href="https://twitter.com/georgesg92" target="_blank") georgesg92
  section(
      data-background-image="assets/leanplum-background.svg"
      data-transition="fade" data-background-position="300px -800px"
      data-background-color="rgb(242, 241, 243)"
  )
    img.logo.padded(data-src="assets/leanplum-logo.svg")
    p.fragment
      img.logo.padded(data-src="assets/vuejs.jpg" style='width: 100px')
      img.logo.padded(data-src="assets/ts.png" style='width: 100px')
      br
      img.fragment.logo.padded(data-src="assets/java.png" style='width: 100px')
      img.fragment.logo.padded(data-src="assets/python.svg" style='width: 100px')

  section(data-transition="fade-in slide-out")
    img.logo.padded(data-src="assets/vmware.jpg")
    img.logo.padded(data-src="assets/musala-soft.jpg")

  section Защо говоря за ECMAScript?

  section Често виждах това:
    pre
      code
        | {
        |   ...,
        |   "babel": {
        |     "presets": ["es2015", "react", "stage-2"]
        |   },
        |   ...,
        | }
    pre.fragment
      code
        | {
        |   "transform-es2015-modules-commonjs",
        |   "transform-es2017-object-entries",
        |   "transform-object-rest-spread",
        |   "transform-es2015-destructuring",
        | }

  section
    p ... и исках да разбера&nbsp;
      strong повече.
    p.fragment Тук съм, за да разкажа какво научих
    p.fragment и&nbsp;
      strong имаше ли смисъл&nbsp;
      | от цялото нещо?

  section
    p Какво е&nbsp;
      span.blue ECMAScript?
      br
      span.fragment.blue стандарт
    p Каква е разликата с&nbsp;
      span.green JavaScript?
      br
      span.fragment.green имплементация / диалект

    aside.notes
      | A standard guarantees that if somebody writes a code following the rules of the standard then the code would run fine in a runtime if the runtime implements the same standard.

  section
    p Други диалекти:
    ul
      li TypeScript
      li ActionScript
      li JScript
    aside.notes
      ul
        li V8 - engine
        li Node.js - framework

  section
    h2
      span.red ECMA
      span script

  section
    img.logo.padded(data-src="assets/ecma.jpg")
    blockquote(cite="https://www.ecma-international.org/") Ecma International is an industry association founded in 1961, dedicated to the standardization of information and communication systems.

  section
    p Ecma дефинират доста стандарти
    p.fragment От ECMA-1 до ECMA-408
    table
      tr.fragment
        td.strong ECMA-408
        td Dart Programming Language
      tr.fragment
        td.strong ECMA-334
        td C# Programming Language
      tr.fragment
        td.strong ECMA-78
        td 5¼-inch floppy disk

  section
    img.padded(data-src="assets/ecma-standards.png" style="height: 500px")

    aside.notes
      ul
        li ECMA-402 - ECMAScript internationalization API - JavaScript.Intl
        li ECMA-414 - ECMAScript Specification Suite
        li JavaScript, was originally named Mocha, later it was renamed to LiveScript, and then to JavaScript.
        li The LiveScript to JavaScript name change came because Netscape and Sun did a license agreement.
        li The language was then submitted for standarization to the ECMA International Organization. By that time, Netscape didn't allow the use of the "JavaScript" name, so the standarized language is named ECMAScript.

  section
    h2 История
    h4 на ECMA-262

  section
    table
      tr.fragment
        td.right.strong(style='width: 220px') 1995
        td Brendan Eich създава JavaScript
      tr.fragment
        td.right.strong Ноем. 1996
        td Netscape предоставя JavaScript за стандартизиране от Ecma
      tr.fragment
        td.right.strong 1996 - 1997
        td Ecma основава TC39

  section
    h2 TC39
    p Technical Committee 39
    p.fragment
      a(href="https://github.com/orgs/tc39/people" target="_blank") Github Team

    aside.notes
      code yarn install -D tc39-members
      br
      code const members = require('tc39-members');

  section
    table
      tr.fragment
        td.right.strong(style='width: 220px') Юни 1997
        td ECMA-262 - първата версия на ECMAScript
      tr.fragment
        td.right.strong Юни 1998
        td ECMAScript 2
      tr.fragment
        td.right.strong Дек. 1999
        td ECMAScript 3

  section
    table
      tr.fragment
        td.right.strong(style='width: 220px') 2003
        td ECMAScript 4 е изоставена
      tr.fragment
        td.right.strong Февр. 2005
        td Jesse James Garrett дефинира&nbsp;
          a(href="https://www.adaptivepath.com/ideas/ajax-new-approach-web-applications/" target="_blank") Ajax
      tr.fragment
        td.right.strong 2005
        td Brendan Eich и Mozilla се присъединяват към Ecma. ECMAScript 4 reboot.
      tr.fragment
        td(colspan="2") Yahoo & Microsoft са против ECMAScript 4 и създават ECMAScript 3.1

  section
    table
      tr.fragment
        td.right.strong(style='width: 220px') 2009
        td Осло, Норвегия - ECMAScript 3.1 е преименуван на ECMAScript 5
      tr.fragment
        td.right.strong Юни 2011
        td ECMAScript 5.1

    aside.notes
      | - 2009 - Oslo, Norway
      | - es5 - strict mode, Array.prototype forEach and map, JSON support

  section
    p
      strong 2015
      | &nbsp- ECMAScript 6
    p.fragment TC39 решава да започнат годишни release-и
    p.fragment ES6 e преименуван на ECMAScript 2015

  section
    p ECMAScript 2016 (ES7)
    p ECMAScript 2017 (
      span.fragment.highlight-blue ES8
      | )
    p ECMAScript 2018 (
      span.fragment.highlight-blue ES9
      | )

  section
    h2 ECMAScript 2017
    p.fragment.blue ES8

  section
    p String padding (
      code padStart
      | &nbsp;и&nbsp;
      code padEnd
      | )

  section
    code Object.values()
    pre.fragment
      code
        | const countries = {
        |   BR: "Brazil",
        |   DE: "Germany",
        |   BG: "Bulgaria",
        |   US: "United States of America"
        | };
        | Object.values(countries);
    pre.fragment
      code // ["Brazil", "Germany", "Bulgaria", "United States of America"]
  section

    code Object.entries()
    pre.fragment
      code
        | const countries = {
        |   BR: "Brazil",
        |   DE: "Germany",
        |   BG: "Bulgaria",
        |   US: "United States of America"
        | };
        | Object.entries(countries);
    pre.fragment
      code
        | [["BR", "Brazil"], ["DE", "Germany"],
        | ["BG", "Bulgaria"], ["US","United States of America"]]

  section
    code Object.getOwnPropertyDescriptors()

    aside.notes
      | one practial application is to use with Object.assign()

  section
    p Последна запетая за параметри на функция
    pre.fragment
      code
        | function myFunc(var1, var2, var3,) {
        |  // ...
        | }
    pre.fragment
      code myFunc(10, 20, 30,);
    pre.fragment
      code
        | myFunc(
        |   10,
        |   20,
        |   30,
        | );

  section
    p Shared memory and atomics

  section
    p
      code async
      | &nbsp;/&nbsp;
      code await
    pre.fragment
      code
        | function loadContentFromServer() {
        |   return new Promise((resolve, reject) => {
        |     setTimeout(() => {
        |       resolve('hello');
        |     }, 3000);
        |   });
        | }
        |
        | async function getContent() {
        |   const result = await loadContentFromServer();
        |   console.log(result);
        | }

    p.fragment
      code await
      | &nbsp;работи и с&nbsp;
      code Promise.all()

      aside.notes
        | fun fact - използва генератори (funtction*() { ... yield })

  section(data-background-image="assets/clap.gif")

  section
    h2 ECMAScript 2018

  section
    p Regexes!

  section
    p Rest/Spread Properties

  section
    code Promise.prototype.finally
    pre.fragment
      code
        | function doSomething() {
        |   doSomething1()
        |     .then(doSomething2)
        |     .then(doSomething3)
        |     .catch(err => {
        |       console.log(err);
        |     })
        |     .finally(() => {
        |       // always executes.
        |     });
        | }

  section
    p Asynchronous Iteration

  section(data-background-image="assets/future.jpg" data-background-size="contain")

  section
    h2 Release Cycle
    p.fragment или как да избегнем ES4 2.0

  section
    h2 Proposals

  section
    h2 Strawman
    h4 Stage 0

  section
    h2 Proposal
    h4 Stage 1

  section
    h2 Draft
    h4 Stage 2

  section
    h2 Candidate
    h4 Stage 3

  section
    h2 Finished
    h4 Stage 4

  section
    | какво може да се ползва днес

  section
    | струва ли си?
